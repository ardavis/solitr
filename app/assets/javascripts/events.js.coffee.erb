#= require jquery
#= require jquery.cookie
#= require helpers
#= require ga

class App.Events
  @_firebase: ->
    # Returns undefined if Firebase or GA is not yet loaded.
    if @_visitorId and Firebase?
      try
        @_firebaseRef ?= \
          new Firebase('https://solitr-analytics.firebaseio.com')
            .child(@_visitorId)
      catch error

  @_trackEvent: (args...) ->
    p '_trackEvent', args...
    try
      _gaq.push(['_trackEvent', args...])
    catch error

  @_totalChi: 0

  @_addChi: (x) ->
    p 'Adding Chi', x
    @_totalChi += x
    @_flushChi()

  @_flushChi: ->
    if firebase = @_firebase()
      p 'Flushing total Chi', @_totalChi
      if @_retryTimer?
        clearInterval @_retryTimer
        @_retryTimer = null
      try
        chiRef = firebase.child('chi')
        @_chiName ?= chiRef.push().name()
        chiRef.child(@_chiName).set(@_totalChi)
      catch erro
    else
      p 'Could not flush Chi, retrying soon'
      @_retryTimer ?= setInterval(=>
        @_addChi(0)
      , 500)

  @beginGame: ->
    @_trackEvent('game', 'begin')
    @_addChi(0.5)

  @stayOnSite: ->
    # Did not bounce
    @_trackEvent('general', 'stay')
    @_addChi(50)

  @activeBeacon: ->
    @_trackEvent('general', 'active')
    @_addChi(@_activeBeaconInterval / 60)

  @initialVisit: not ($.cookie('__utmb') and $.cookie('__utmc'))

  # Call stayOnSite after 30 seconds, even across reloads.
  @scheduleInitialVisitBeacon: ->
    cookieOptions = (expiresInSeconds) ->
      opts =
        path: '/'
        <% if Rails.env.production? %>domain: 'solitr.com'<% end %>
      if expiresInSeconds
        opts.expires = new Date(Date.now() + expiresInSeconds * 1000)
      opts

    beaconDelay = 30

    if App.Events.initialVisit
      $.cookie 'solitr_initial_short', '_', cookieOptions(beaconDelay)
      $.cookie 'solitr_initial_long', '_', cookieOptions(60 * 30)

    # We wait for the short cookie to disappear while the long cookie is still
    # around. The long cookie is used to ensure that we still send a beacon
    # even if the short cookie expires during a page reload.
    #
    # If no `initial` cookies are around, this will do nothing.
    intervalId = setInterval ->
      if $.cookie('solitr_initial_long')
        if not $.cookie('solitr_initial_short')
          # p 'No short cookie'
          removeCookies()
          App.Events.stayOnSite()
        # else
        #   p 'Waiting for short cookie to disappear'
      else
        # p 'No long cookie'
        removeCookies()
    , 1000

    removeCookies = ->
      $.removeCookie('solitr_initial_long', cookieOptions())
      $.removeCookie('solitr_initial_short', cookieOptions())
      # Clear interval just in case we didn't remove the cookies successfully.
      clearInterval intervalId

  @_activeBeaconInterval: 60
  @scheduleActiveBeacon: ->
    idleTimeout = 30
    $ =>
      $.idleTimer(idleTimeout * 1000)
      setInterval ->
        if $(document).data('idleTimer') == 'active'
          App.Events.activeBeacon()
      , @_activeBeaconInterval * 1000

<% if Rails.env.development? %>
App.Events._visitorId = 1
p 'Self-assigning visitor ID 1'
<% elsif Rails.env.production? %>
try
  _gaq.push ->
    App.Events._visitorId = _gat._getTrackers()[0]._visitCode()
    p 'Visitor ID', App.Events._visitorId
catch error
<% end %>

<% unless Rails.env.test? %> # No non-deterministic business in tests
App.Events.scheduleInitialVisitBeacon()
App.Events.scheduleActiveBeacon()
<% end %>
